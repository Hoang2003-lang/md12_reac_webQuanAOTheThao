import React, { useEffect, useRef, useState } from 'react';
import axios from 'axios';
import io from 'socket.io-client';
import '../styles/chat.css';

const AdminChat = () => {
  const [showChat, setShowChat] = useState(false);
  const [chatList, setChatList] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');
  const messagesEndRef = useRef(null);
  const currentChatIdRef = useRef(null);
  const socketRef = useRef(null);

  const adminId = '683e9c91e2aa5ca0fbfb1030'; // ID c·ªßa admin

  // K·∫øt n·ªëi socket
  useEffect(() => {
    socketRef.current = io('http://localhost:3002');

    socketRef.current.on('connect', () => {
      console.log('üîå K·∫øt n·ªëi socket th√†nh c√¥ng');
    });

    socketRef.current.on('new message', (msg) => {
      if (msg.chatId === currentChatIdRef.current) {
        setMessages(prev => [...prev, msg.message]);
      }
    });

    // th·∫£ icon
    socketRef.current.on('reaction updated', ({ messageId, userId, emoji }) => {
      setMessages(prev =>
        prev.map(msg =>
          msg._id === messageId
            ? {
              ...msg,
              reactions: [
                ...(msg.reactions || []).filter(r => r.user !== userId),
                { user: userId, emoji }
              ]
            }
            : msg
        )
      );
    });

    // thu h·ªìi tin nh·∫Øn
    socketRef.current.on('message deleted', ({ messageId }) => {
      setMessages(prev => prev.filter(msg => msg._id !== messageId));
    });

    // xo√° ƒëo·∫°n chat
    socketRef.current.on('chat messages cleared', ({ chatId }) => {
      if (chatId === currentChatIdRef.current) {
        setMessages([]);
      }
    });



    return () => {
      socketRef.current.disconnect();
    };
  }, []);

  // L·∫•y danh s√°ch chat
  useEffect(() => {
    axios.get('http://localhost:3002/api/chats')
      .then(res => {
        const chats = res.data.data;

        const filteredChats = chats
          .filter(chat => chat.participants.some(p => p._id === adminId))
          .map(chat => {
            const otherUser = chat.participants.find(p => p._id !== adminId);
            return {
              chatId: chat._id,
              userId: otherUser?._id,
              userName: otherUser?.name,
              userAvatar: otherUser?.avatar,
              lastMessage: chat.lastMessage?.content || 'Ch∆∞a c√≥ tin nh·∫Øn',
            };
          });

        setChatList(filteredChats);
      })
      .catch(err => console.error('‚ùå L·ªói load danh s√°ch chat:', err));
  }, []);

  // L·∫•y tin nh·∫Øn khi ch·ªçn chat
  useEffect(() => {
    if (!selectedChat) return;

    // currentChatIdRef.current = selectedChat.chatId;

    const chatId = selectedChat.chatId;
    currentChatIdRef.current = chatId;
    socketRef.current.emit('join chat', chatId);

    axios.get(`http://localhost:3002/api/chats/${selectedChat.chatId}`)
      .then(res => {
        setMessages(res.data.data.messages || []);
      })
      .catch(err => console.error('‚ùå L·ªói l·∫•y tin nh·∫Øn:', err));
  }, [selectedChat]);

  // Cu·ªôn xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // G·ª≠i tin nh·∫Øn
  const sendMessage = async () => {
    if (!message.trim() || !selectedChat?.chatId) {
      alert('Thi·∫øu n·ªôi dung ho·∫∑c kh√¥ng c√≥ chatId');
      return;
    }

    const msgData = {
      chatId: selectedChat.chatId,
      senderId: adminId,
      content: message
    };

    try {
      // await axios.post('http://localhost:3001/api/chats/message', msgData);

      // const sentMsg = {
      //   sender: adminId,
      //   senderId: adminId,
      //   content: message,
      //   type: 'text',
      //   timestamp: new Date(),
      //   isRead: false,
      //   chatId: selectedChat.chatId
      // };

      socketRef.current.emit('send message', msgData);

      // setMessages(prev => [...prev, sentMsg]);
      setMessage('');
    } catch (err) {
      console.error('‚ùå G·ª≠i tin nh·∫Øn l·ªói:', err);
      alert('Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn!');
    }
  };

  const handleRightClick = (e, msg) => {
    e.preventDefault();
    // const isAdmin = msg.sender === adminId;
    const isAdmin = (typeof msg.sender === 'string' ? msg.sender : msg.sender?._id) === adminId;

    // const choice = window.prompt('Ph·∫£n ·ª©ng: 1 üëç, 2 ‚ù§Ô∏è, 3 üòÇ, 4 Thu h·ªìi');
    let promptText = 'Ch·ªçn c·∫£m x√∫c: 1 üëç, 2 ‚ù§Ô∏è, 3 üòÇ';
    if (isAdmin) {
      promptText += ', 4 Thu h·ªìi';
    }
    const choice = window.prompt(promptText);

    if (choice === '1') reactToMessage(msg._id, 'üëç');
    if (choice === '2') reactToMessage(msg._id, '‚ù§Ô∏è');
    if (choice === '3') reactToMessage(msg._id, 'üòÇ');
    if (choice === '4' && isAdmin) deleteMessage(msg._id);
  };

  const reactToMessage = (messageId, emoji) => {
    socketRef.current.emit('reaction message', {
      chatId: selectedChat.chatId,
      messageId,
      userId: adminId,
      emoji
    });
  };

  const deleteMessage = (messageId) => {
    socketRef.current.emit('delete message', {
      chatId: selectedChat.chatId,
      messageId
    });
  };

  const handleDeleteChat = async () => {
    const confirmed = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° to√†n b·ªô ƒëo·∫°n chat?');
    if (!confirmed) return;

    try {
      await axios.delete(`http://localhost:3002/api/chats/${selectedChat.chatId}`);

      // Xo√° kh·ªèi danh s√°ch hi·ªÉn th·ªã
      setChatList(prev => prev.filter(c => c.chatId !== selectedChat.chatId));

      // Xo√° UI hi·ªán t·∫°i
      setSelectedChat(null);
      setMessages([]);
    } catch (err) {
      console.error('‚ùå L·ªói xo√° ƒëo·∫°n chat:', err);
      alert('Kh√¥ng th·ªÉ xo√° ƒëo·∫°n chat');
    }
  };

  return (
    <>
      <div className="chat-icon" onClick={() => setShowChat(!showChat)}>
        üí¨
      </div>

      {showChat && (
        <>
          {!selectedChat ? (
            <div className="chat-box">
              <div className="user-list">
                <h4>Ng∆∞·ªùi d√πng:</h4>
                {chatList.map((chat) => (
                  <div
                    key={chat.chatId}
                    className="user-item"
                    onClick={() => setSelectedChat(chat)}
                  >
                    <img src={chat.userAvatar} alt={chat.userName} className="avatar" />
                    <div>
                      <strong>{chat.userName}</strong> <br />
                      <small>{chat.lastMessage}</small>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="chat-box">
              <div className="user-list">
                <h4>Ng∆∞·ªùi d√πng:</h4>
                {chatList.map((chat) => (
                  <div
                    key={chat.chatId}
                    className={`user-item ${selectedChat?.chatId === chat.chatId ? 'selected' : ''}`}
                    onClick={() => setSelectedChat(chat)}
                  >
                    <img src={chat.userAvatar} alt={chat.userName} className="avatar" />
                    <div>
                      <strong>{chat.userName}</strong> <br />
                      <small>{chat.lastMessage}</small>
                    </div>
                  </div>
                ))}
              </div>

              <div className="chat-content">
                <div className="chat-header">
                  <button onClick={() => setSelectedChat(null)}>‚¨Ö Quay l·∫°i</button>
                  <h4>{selectedChat.userName}</h4>
                  <button onClick={handleDeleteChat} className="btn-danger">üóëÔ∏è Xo√°</button>
                </div>

                <div className="messages">
                  {messages.map((msg, index) => (
                    <div
                      key={msg._id || `${msg.sender}-${index}`}
                      className={`message ${(typeof msg.sender === 'string' ? msg.sender : msg.sender?._id) === adminId
                        ? 'admin'
                        : 'user'
                        }`}
                      onContextMenu={(e) => handleRightClick(e, msg)} // s·ª± ki·ªán
                    >
                      <div className="message-content">
                        {msg.content}

                        {msg.reactions?.length > 0 && (
                          <div className="reactions">
                            {msg.reactions.map((r, i) => (
                              <span key={i}>{r.emoji}</span>
                            ))}
                          </div>
                        )}
                      </div>
                      <div className="message-time">
                        {new Date(msg.timestamp).toLocaleTimeString('vi-VN', {
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>

                <div className="input">
                  <input
                    type="text"
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    value={message}
                    onChange={e => setMessage(e.target.value)}
                  />
                  <button onClick={sendMessage}>G·ª≠i</button>
                </div>
              </div>
            </div>
          )}
        </>
      )}
    </>
  );
};

export default AdminChat;